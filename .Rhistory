### Absolute flows
#### Single panel
fishowfsubplot2 <- ggplot(data = Fishowfsub, aes(x = fishnice, y = mean, fill = prey)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_viridis_d(option = "viridis") +
scale_y_continuous(expand = expansion(mult = 0), limits = c(0, 0.5)) +
labs(x = " ", y = expression(paste("mmol C m"^"-2", " d"^"-1")), fill = "Food source", title = "OWF") +
theme_classic() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title  = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
fishowfsubplot2
#### 4 panels absolute flows
fishowfsubplot <- ggplot(data = Fishowfsub, aes(x = fishnice, y = mean, fill = prey)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_viridis_d(option = "viridis") +
facet_grid(~area) + #, scales = "free_x") +
labs(x = " ", y = expression(paste("mmol C m"^"-2", " d"^"-1")), fill = "Food source", title = "OWF foodweb") +
theme_classic() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title  = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
fishowfsubplot
### Relative flows
#### Single panel
fishowfpropsub  <- ggplot(data = Fishowfsub, aes(x = fishnice, y = mean, fill = prey)) +
geom_bar(stat = "identity", position = "fill") +
coord_flip() +
scale_y_continuous(expand = expansion(mult = 0)) +
scale_fill_viridis_d(option = "viridis") +
labs(x = " ", y = expression(paste("proportion of uptake")), fill = "Food source", title = "OWF foodweb") +
theme_classic() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title  = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
fishowfpropsub
#### 4 panels
fishowfpropsub2 <- ggplot(data = Fishowfsub, aes(x = fishnice, y = mean, fill = prey)) +
geom_bar(stat = "identity", position = "fill") +
coord_flip() +
scale_fill_viridis_d(option = "viridis") +
facet_grid(~area) +
labs(x = " ", y = expression(paste("proportion of uptake")), fill = "Food source", title = "OWF") +
theme_classic() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title  = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
fishowfpropsub2
library(patchwork)
layout <- "111222333
111222333
111222333
444444444
444444444"
Fishuptake <- fishcoarsesubplot + fishfinesubplot + fishowfsubplot2 + fishowfsubplot
Fishuptake <- Fishuptake + plot_layout(design = layout, guides = "collect") + plot_annotation(tag_levels = 'A')
Fishuptake
## Relative
Fishuptakeprop <- fishcoarseprop + fishfineprop + fishowfprop2 + fishowfprop
Fishuptakeprop <- fishcoarseprop2 + fishfineprop2 + fishowfpropsub + fishowfpropsub2
Fishuptakeprop <- Fishuptakeprop + plot_layout(design = layout, guides = "collect") + plot_annotation(tag_levels = 'A')
Fishuptakeprop
# Absolute uptakes
library(patchwork)
layout <- "111222333
111222333
111222333
444444444
444444444"
Fishuptake <- fishcoarsesubplot + fishfinesubplot + fishowfsubplot2 + fishowfsubplot
Fishuptake <- Fishuptake + plot_layout(design = layout, guides = "collect") + plot_annotation(tag_levels = 'A')
Fishuptake
ggsave("./paper_figures_tables/figures/Figure4_fishuptake_totalvalues.png", height = 10, width = 12)
# Proportional uptake
Fishuptakeprop <- fishcoarseprop2 + fishfineprop2 + fishowfpropsub + fishowfpropsub2
Fishuptakeprop <- Fishuptakeprop + plot_layout(design = layout, guides = "collect") + plot_annotation(tag_levels = 'A')
Fishuptakeprop
ggsave("./paper_figures_tables/figures/Figure4_fishuptake_proportional.pdf", height = 10, width = 12)
s330wat <- sum(restab330[c(11, 12, 14), 2])
s330wat <- sum(restabcoarse[c(11, 12, 14), 2])
s330sed <- sum(restabcoarse[13, 2])
s780wat <- sum(restabfine[c(11, 12, 14), 2])
s780sed <- sum(restabfine[13, 2])
sowfwat  <- sum(restabowf[c(11, 12, 14), 2])
sowfsed  <- sum(restabowf[13, 2])
s330rel <- restabcoarse[c(18:25), 2]/c(rep(s330wat, 4), rep(s330sed, 4))*100
s780rel <- restabfine[c(18:25), 2]/c(rep(s780wat, 4), rep(s780sed, 4))*100
sowfrel  <- restabowf[ c(18:25), 2]/c(rep(sowfwat , 4), rep(sowfsed , 4))*100
dfmean <- data.frame("name" = restabcoarse[c(18:25), 1],
"Coarse" = s330rel,
"Fine" = s780rel,
"OWF"  = sowfrel)
y      <- as.matrix(t(round(dfmean[, 2:4], 2)))
nms2 <- c("Water->bivalves", "Water->crustacea", "Water->polychaetes", "Water->others.",
"Sedim.->bivalves", "Sedim.->crustacea", "Sedim.->polychaetes", "Sedim.->others.")
par(mfrow = c(1,1))
a <- barplot(t(dfmean[, (2:4)]), beside = T, main = "Uptake", names.arg = nms2,
ylab = "% of total water or sediment", cex.names = 0.8, space = rep(c(0.8, 0.2, 0.2), 8), ylim = c(0, 95)) # , space = 0.01) #, xlim = c(0, 3.5))
legend("topleft", c("Coarse", "Fine", "OWF"), bty = "n", fill = gray.colors(3))
text(a, y + 2, labels = as.character(y), cex = 0.8)
library(readr)
install.packages("readr")
library(readr)
library(dplyr)
perform_t_test <- function(group1, group2) {
mean1 <- group1$mean_proportion
std1  <- group1$mean_sd
n1    <- 10000
mean2 <- group2$mean_proportion
std2  <- group2$mean_sd
n2    <- 10000
t_stat <- (mean1 - mean2) / sqrt((std1^2 / n1) + (std2^2 / n2))
df <- ((std1^2 / n1) + (std2^2 / n2))^2 / (((std1^2 / n1)^2 / (n1 - 1)) + ((std2^2 / n2)^2 / (n2 - 1)))
p_value <- 2 * pt(-abs(t_stat), df)
return(list(t_stat = t_stat, df = df, p_value = p_value))
}
fishstats <- read_delim("fishstats.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
# Get unique Foodsources
foodsources <- unique(fishstats$Foodsource)
# Initialize a list to store results
results <- list()
for(i in unique(fishstats$Fish)){
sub <- fishstats[fishstats$Fish == i,]
for (foodsource in foodsources) {
subset_data <- sub %>% filter(Foodsource == foodsource)
foodwebs <- unique(subset_data$Foodweb)
if (length(foodwebs) < 2) next  # Skip if less than 2 groups to compare
dims <- lapply(2, function(y) combn(foodwebs, y))[[1]]
for (j in 1:ncol(dims)) {
group1 <- subset_data %>% filter(Foodweb == dims[1,j])
group2 <- subset_data %>% filter(Foodweb == dims[2,j])
test_result <- perform_t_test(group1, group2)
result <- list(
fish = i,
foodsource = foodsource,
foodweb1 = group1$Foodweb,
foodweb2 = group2$Foodweb,
t_stat = test_result$t_stat,
df = test_result$df,
p_value = test_result$p_value
)
results <- append(results, list(result))
}
}
}
results_tibble <- bind_rows(lapply(results, as_tibble))
print(results_tibble, n = 110)
write.table(results_tibble, "./paper_figures_tables/tables/fishdietstats.txt", quote = FALSE)
results_tibble
fishstats <- read_delim("fishstats.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
fishstats
fishstats <- read_delim("fishstats.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
# Get unique Foodsources
foodsources <- unique(fishstats$Foodsource)
# Initialize a list to store results
results <- list()
for(i in unique(fishstats$Fish)){
sub <- fishstats[fishstats$Fish == i,]
for (foodsource in foodsources) {
subset_data <- sub %>% filter(Foodsource == foodsource)
foodwebs <- unique(subset_data$Foodweb)
if (length(foodwebs) < 2) next  # Skip if less than 2 groups to compare
dims <- lapply(2, function(y) combn(foodwebs, y))[[1]]
for (j in 1:ncol(dims)) {
group1 <- subset_data %>% filter(Foodweb == dims[1,j])
group2 <- subset_data %>% filter(Foodweb == dims[2,j])
test_result <- perform_t_test(group1, group2)
result <- list(
fish = i,
foodsource = foodsource,
foodweb1 = group1$Foodweb,
foodweb2 = group2$Foodweb,
t_stat = test_result$t_stat,
df = test_result$df,
p_value = test_result$p_value
)
results <- append(results, list(result))
}
}
}
results_tibble <- bind_rows(lapply(results, as_tibble))
print(results_tibble, n = 110)
write.table(results_tibble, "./paper_figures_tables/tables/fishdietstats.txt", quote = FALSE)
knitr::kable(restabcoarse, caption = "Summed flows Coarse", digits = 3)
knitr::kable(restabfine, caption = "Summed flows Fine", digits = 3)
knitr::kable(restabowf , caption = "Summed flows OWF" , digits = 3)
## Load data
load("./finalresults/coarsecflowsmatrixbootstrap.Rdata") # bscoarsecflows
load("./finalresults/coarsefishmatrixbootstrap.Rdata")   # bscoarsefish
load("./finalresults/finecflowsmatrixbootstrap.Rdata")   # bsfinecflows
load("./finalresults/finefishmatrixbootstrap.Rdata")     # bsfinefish
load("./finalresults/owfcflowsmatrixbootstrap.Rdata")    # bsowfcflows
load("./finalresults/owffishmatrixbootstrap.Rdata")      # bsowffish
XYcomparison <- function(Co=NULL, Fi=NULL, Ow=NULL, cutoff=1){
n       <- length(Co)
Coboot <- Co[sort(runif(n),index.return=TRUE)$ix]
Fiboot <- Fi[sort(runif(n),index.return=TRUE)$ix]
Owboot <- Ow[sort(runif(n),index.return=TRUE)$ix]
CoFiboot <- Coboot / Fiboot
CoFi     <-  sum(CoFiboot>cutoff)/length(CoFiboot)
CoOwboot <- Coboot / Owboot
CoOw     <-  sum(CoOwboot>cutoff)/length(CoOwboot)
FiOwboot <- Fiboot / Owboot
FiOw     <-  sum(FiOwboot>cutoff)/length(FiOwboot)
return(data.frame("Coarse-Fine" = CoFi,
"Coarse-OWF"  = CoOw,
"Fine-OWF"    = FiOw))
}
flxes <- c("Zoo->DIC", "Fish->DIC", "Jelly->DIC", "SedBac->DIC")
fluxcomps2 <- NULL
for(i in seq_along(flxes)){
flow <- flxes[i]
out <- XYcomparison(Co = bscoarsecflows[,flow],
Fi = bsfinecflows[,flow],
Ow = bsowfcflows[,flow])
rownames(out) <- flow
fluxcomps2 <- rbind(fluxcomps2, out)
}
fluxcomps2 <- cbind(fluxcomps2*100)
fluxcomps <- NULL
for(i in 1:41){
out <- XYcomparison(Co = bscoarsecflows[,i],
Fi = bsfinecflows[,i],
Ow = bsowfcflows[,i])
rownames(out) <- colnames(bscoarsecflows)[i]
fluxcomps <- rbind(fluxcomps, out)
}
fluxcomps <- cbind("Coarse" = round(restabcoarse$mean[1:41], 4),
"Fine"   = round(restabfine$mean[1:41], 4),
"OWF"    = round(restabowf$mean[1:41], 4), fluxcomps*100)
netindowf
## Indices
indcomps <- NULL
for(i in 1:17){
out <- XYcomparison(Co = netindcoarse[,i],
Fi = netindfine[,i],
Ow = netindowf[,i])
rownames(out) <- colnames(netindcoarse)[i]
indcomps <- rbind(indcomps, out)
}
indcomps <- cbind("Coarse" = round(NICOARSE$mean[1:17],4),
"Fine"   = round(NIfine$mean[1:17],4),
"OWF"    = round(NIowf_2$mean[1:17],4), indcomps*100)
## Fish diets
bscoarsefish$row_id <- rownames(bscoarsefish)
long_dfcoarse <- pivot_longer(bscoarsefish,
cols = -row_id,
names_to = c("Fish", "Prey"),
names_sep = "_")
wide_dfcoarse <- pivot_wider(long_dfcoarse,
names_from = row_id,
values_from = value)
bsfinefish$row_id <- rownames(bsfinefish)
long_dffine <- pivot_longer(bsfinefish,
cols = -row_id,
names_to = c("Fish", "Prey"),
names_sep = "_")
wide_dffine <- pivot_wider(long_dffine,
names_from = row_id,
values_from = value)
bsowffish$row_id <- rownames(bsowffish)
long_dfowf <- pivot_longer(bsowffish,
cols = -row_id,
names_to = c("Fish", "Prey"),
names_sep = "_")
long_dfowf <- long_dfowf %>%
mutate(Prey = case_when(
Prey %in% c("Biv", "Crust", "Poly", "Other") ~ Prey,
grepl("Biv", Prey) ~ "Biv",
grepl("Crust", Prey) ~ "Crust",
grepl("Poly", Prey) ~ "Poly",
grepl("Other", Prey) ~ "Other",
TRUE ~ Prey
)) %>%
group_by(Fish, Prey, row_id) %>%
summarise(value = sum(value, na.rm = TRUE), .groups = 'drop')
# Desired order of prey types
desired_order <- c("Phyto", "Zoo", "SPOM", "SOM", "Benthos", "Biv", "Crust", "Poly", "Other", "Fish")
# Ensure "Prey" column matches the desired levels
long_dfowf <- long_dfowf %>%
mutate(Prey = factor(Prey, levels = desired_order))
# Filter out rows where "Prey" is NA (which would be the dropped levels)
long_dfowf <- long_dfowf %>%
filter(!is.na(Prey))
# Step 3: Pivot back to wide format with the desired order
wide_dfowf <- pivot_wider(long_dfowf,
names_from = row_id,
values_from = value)
levels(wide_dfowf$Prey)[10] <- "Pisc"
# Mega_dataframe
merged_df <- full_join(wide_dfcoarse, wide_dffine, by = c("Fish", "Prey"), suffix = c("_coarse", "_fine"))
# Merge the result with df3
merged_df <- full_join(merged_df, wide_dfowf, by = c("Fish", "Prey"), suffix = c("", "_owf"))
# Run permanova and simper.
fish <- c("CALLIO", "CARANG", "GADIFO", "GOBIFO", "COTTOI", "PERCOI", "SCORPA", "AMMODY", "PLEURO")
permlist2 <- list(NULL)
simplist2 <- list(NULL)
for(i in seq_along(fish)){
fishsp <- fish[i]
sub <- t(subset(merged_df, Fish == fishsp)[,-c(1,2)])
colnames(sub) <- desired_order
sub <- sub[,-5]
seqrow <- seq(1, nrow(sub), by = 100)
sub <- sub[seqrow,]
sub <- decostand(sub, "total", margin = 1)
fws <- c(rep("Coarse", 9950),rep("Fine", 9950),rep("OWF", 12250))[seqrow]
sub.env <- data.frame("FW" = c(fws), "this" = rep("a", length(fws)))
sub_braycurtis <- vegdist(sub, method = "bray")
# Perform PERMANOVA
# permanova_result <- pairwise.adonis2(sub_braycurtis~FW, data = sub.env)
# print(permanova_result)
# Perform SIMPER
simper_result <- simper(sub, sub.env$FW, permutations = 999)
# print(simper_result)
# permlist2[[i]] <- permanova_result
simplist2[[i]] <- simper_result
# names(permlist2)[i] <- fishsp
names(simplist2)[i] <- fishsp
}
save(file = "./finalresults/fishpermanovacomparison.rda", permlist)
simplist2
permlist2
permlist
permlist2
simplist2
permlist2 <- list(NULL)
simplist2 <- list(NULL)
for(i in seq_along(fish)){
fishsp <- fish[i]
sub <- t(subset(merged_df, Fish == fishsp)[,-c(1,2)])
colnames(sub) <- desired_order
sub <- sub[,-5]
seqrow <- seq(1, nrow(sub), by = 100)
sub <- sub[seqrow,]
sub <- decostand(sub, "total", margin = 1)
fws <- c(rep("Coarse", 9950),rep("Fine", 9950),rep("OWF", 12250))[seqrow]
sub.env <- data.frame("FW" = c(fws), "this" = rep("a", length(fws)))
sub_braycurtis <- vegdist(sub, method = "bray")
# Perform PERMANOVA
# permanova_result <- pairwise.adonis2(sub_braycurtis~FW, data = sub.env)
# print(permanova_result)
# Perform SIMPER
simper_result <- simper(sub, sub.env$FW, permutations = 999)
# print(simper_result)
permlist2[[i]] <- permanova_result
simplist2[[i]] <- simper_result
names(permlist2)[i] <- fishsp
names(simplist2)[i] <- fishsp
}
fish <- c("CALLIO", "CARANG", "GADIFO", "GOBIFO", "COTTOI", "PERCOI", "SCORPA", "AMMODY", "PLEURO")
permlist2 <- list(NULL)
simplist2 <- list(NULL)
for(i in seq_along(fish)){
fishsp <- fish[i]
sub <- t(subset(merged_df, Fish == fishsp)[,-c(1,2)])
colnames(sub) <- desired_order
sub <- sub[,-5]
seqrow <- seq(1, nrow(sub), by = 100)
sub <- sub[seqrow,]
sub <- decostand(sub, "total", margin = 1)
fws <- c(rep("Coarse", 9950),rep("Fine", 9950),rep("OWF", 12250))[seqrow]
sub.env <- data.frame("FW" = c(fws), "this" = rep("a", length(fws)))
sub_braycurtis <- vegdist(sub, method = "bray")
# Perform PERMANOVA
permanova_result <- pairwise.adonis2(sub_braycurtis~FW, data = sub.env)
# print(permanova_result)
# Perform SIMPER
simper_result <- simper(sub, sub.env$FW, permutations = 999)
# print(simper_result)
permlist2[[i]] <- permanova_result
simplist2[[i]] <- simper_result
names(permlist2)[i] <- fishsp
names(simplist2)[i] <- fishsp
}
save(file = "./finalresults/fishpermanovacomparison.rda", permlist)
save(file = "./finalresults/fishpermanovacomparison.rda", permlist2)
save(file = "./finalresults/fishsimpercomparison.rda", simplist2)
indtab <- cbind(NICOARSE$mean, NIfine$mean, NIowf_2$mean,
NICOARSE$stdev, NIfine$stdev, NIowf_2$stdev)
colnames(indtab) <- c("Coarse mean", "Fine mean", "OWF mean",
"Coarse std" , "Fine std" , "OWF std")
rownames(indtab) <- rownames(NICOARSE)
knitr::kable(indtab, caption = "Network indices", digits = 3)
write.table(indtab, "./paper_figures_tables/tables/trophic_indices.txt", quote = FALSE)
require(permeable)
?fesdia
?permeable
fesdia
?fesdia
?permeable.fesdia
?LIM
require(LIM)
?`LIM-package`
?`LIM-package`
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
# Packages
require(LIM)
require(tidyr)
require(dplyr)
require(NetIndices)
require(magrittr)
require(ggplot2)
require(ggh4x)
require(ggpmisc)
require(ggrepel)
require(factoextra)
require(vegan)
source("~/GitHub/Foodweb_publication/auxfuns.R")
source("~/GitHub/Foodweb_OWF/auxfuns.R")
# Lims
load(file = "./finalresults/limcoarse.rda") # LIM.coarse
load(file = "./finalresults/limfine.rda")   # LIM.fine
load(file = "./finalresults/limowf.rda")    # LIM.owf
# Solutions
load(file = "./finalresults/solldeicoarse.rda") # Solldeicoarse
load(file = "./finalresults/solldeifine.rda")   # Solldeifine
load(file = "./finalresults/solldeiowf.rda")    # Solldeiowf
# Flows
load(file = "./finalresults/Flows_coarse_iso.Rdata") # Flows.Coarse
load(file = "./finalresults/Flows_fine_iso.Rdata")   # Flows.Fine
load(file = "./finalresults/Flows_owf_iso.Rdata")    # Flows.owf
# Results tables
load("./finalresults/restab_coarse_iso.Rdata") # restabcoarse
load("./finalresults/restab_fine_iso.Rdata")   # restabfine
load("./finalresults/restab_owf_iso.Rdata")    # restabowf
# Fish
load("./finalresults/fish_coarse_iso.Rdata") # fishcoarse
load("./finalresults/fish_fine_iso.Rdata")   # fishfine
load("./finalresults/fish_owf_iso.Rdata")    # fishowf
# Foodweb indices
load("./finalresults/coarseindtable.rda") # NICOARSE
load("./finalresults/fineindtable.rda")   # NIfine
load("./finalresults/owfindtable.rda")    # NIowf_2
load("./finalresults/NETINDCOARSE.rda") #, netindcoarse
load("./finalresults/NETINDfine.rda")   #, netindfine
load("./finalresults/NETINDowf.rda")    #, netindowf
nmscoarse <- read.table("./BPNS_input_files/nmscoarse.txt", sep = ";")
nmsfine   <- read.table("./BPNS_input_files/nmsfine.txt", sep = ";")
nmsowf    <- read.table("./BPNS_input_files/nmsowf.txt", sep = ";")
keycoarse <- cbind("Code" = LIM.coarse$Components[,1], "Names" = nmscoarse[1:41, 1], "Biomass (mmol C m-2)" = LIM.coarse$Components[, 2])
keyfine   <- cbind("Code" = LIM.fine$Components[,1]  , "Names" = nmsfine[1:46, 1]  , "Biomass (mmol C m-2)" = LIM.fine$Components[, 2])
keyowf    <- cbind("Code" = LIM.owf$Components[,1]   , "Names" = nmsowf[1:65, 1]   , "Biomass (mmol C m-2)" = LIM.owf$Components[, 2])
knitr::kable(keycoarse, caption = "Key to Coarse foodweb codes")
knitr::kable(keyfine  , caption = "Key to Fine foodweb codes")
knitr::kable(keyowf   , caption = "Key to OWF foodweb codes")
write.table(keycoarse, "./paper_figures_tables/tables/key_coarse.txt", quote = FALSE)
write.table(keyfine  , "./paper_figures_tables/tables/key_fine.txt"  , quote = FALSE)
write.table(keyowf   , "./paper_figures_tables/tables/key_owf.txt"   , quote = FALSE)
matcoarse  <- Flowmatrix(lim = LIM.coarse, web = Solldeicoarse$X+1)
matcoarseb <- matcoarse[-c(41:44), -c(41:44)]
# full
plotweb(Flowmatrix(lim = LIM.coarse, web = Solldeicoarse$X+1), main="Coarse Foodweb",
bty="n", lab.size= 1.2, names = nmscoarse[,1], log = T, leg.title = "log + 1")
# simplified
plotweb(matcoarseb, main="Coarse Foodweb - Simplified",
bty="n", lab.size=1.2, names = nmscoarse[1:40,1], log = T, leg.title = "log + 1")
# relative weight % of macrofauna of total biomass
maccoarse <- data.frame("Name" = LIM.coarse$Parameters$name[12:35], "Weight" = as.numeric(LIM.coarse$Parameters$val[12:35]))
maccoarse$rel <- round(maccoarse$Weight/sum(maccoarse$Weight)*100,2)
macfine <- data.frame("Name" = LIM.fine$Parameters$name[12:40], "Weight" = as.numeric(LIM.fine$Parameters$val[12:40]))
macfine$rel <- round(macfine$Weight/sum(macfine$Weight)*100,2)
macowf <- data.frame("Name" = LIM.owf$Parameters$name[15:59], "Weight" = as.numeric(LIM.owf$Parameters$val[15:59]))
macowf$rel <- round(macowf$Weight/sum(macowf$Weight)*100,2)
# Subdivision for OWF food web
macowftur <- data.frame("Name" = LIM.owf$Parameters$name[15:36], "Weight" = as.numeric(LIM.owf$Parameters$val[15:36]))
macowftur$rel <- round(macowftur$Weight/sum(macowftur$Weight)*100,2)
macowfsof <- data.frame("Name" = LIM.owf$Parameters$name[37:54], "Weight" = as.numeric(LIM.owf$Parameters$val[37:54]))
macowfsof$rel <- round(macowfsof$Weight/sum(macowfsof$Weight)*100,2)
macowfubi <- data.frame("Name" = LIM.owf$Parameters$name[55:59], "Weight" = as.numeric(LIM.owf$Parameters$val[55:59]))
macowfubi$rel <- round(macowfubi$Weight/sum(macowfubi$Weight)*100,2)
what <- rep(c("Animal biomass", "Macrofauna biomass", "Fish biomass", "Number of species", "Total System Throughput (TST)", "components", "unknowns"), 3)
what <- factor(what, levels = c("Animal biomass", "Macrofauna biomass", "Fish biomass", "Number of species", "Total System Throughput (TST)", "components", "unknowns"))
vals <- c(2047.2 , 2042.9 , 4.3 , 57 , 762.6, 41, 453,
12894.2, 12881.8, 12.4, 92 , 948.7, 46, 536,
662.0  , 657.1  , 4.9 , 120, 763.9, 65, 853)
fw <- rep(c("Coarse", "Fine", "OWF"), each = 7)
overviewdf <- data.frame("var" = what, "foodweb" = fw, "val" = as.numeric(vals))
overviewdfsub <- overviewdf[overviewdf$var %in% c("Macrofauna biomass", "Fish biomass", "Number of species", "Total System Throughput (TST)"),]
overviewfig <- ggplot(data = overviewdfsub, aes(x = foodweb, y = val, fill = foodweb)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_viridis_d(option = "viridis") +
geom_text(aes(label = val), hjust = - 0.2, color = "black", position = position_dodge(0.9), size = 4, angle = 90) +
facet_wrap(~var, ncol = 4, scales = "free_y",
labeller = as_labeller(
c(`Macrofauna biomass` = "Macrofauna biomass (mmol m-2)",
`Fish biomass` = "Fish biomass (mmol m-2)",
`Number of species` = "Number of species (n)",
`Total System Throughput (TST)` = "Total System Throughput (mmol C m-2 d-1)")),
strip.position = "left") +
scale_y_continuous(expand = c(0.3, 0.0)) +  coord_cartesian(ylim = c(0, NA), clip = "off") +
labs(fill = "Food web") +
xlab(" ") +
ylab(" ") +
theme_classic() +
theme(strip.background = element_blank(), strip.placement = "outside",
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12))
overviewfig
ggsave("./paper_figures_tables/figures/basicstats.png", height = 5, width = 12)
